#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<time.h>
#include "debug.h"
#include "minheap.h"
#define INF 1000000
#define FILENAME "hw5..data"
#define point print_debug()
#define MAX 300
#define none -1 
//written by jaewonYoon 20180531
HeapType heaptype;
int basic_array[MAX][MAX];  //  from input.txt
int vertex_count = 0; // whole city count 
int edge_count = 0; 
char name[MAX][MAX]; // whole sity name 
char temp_array[MAX][MAX]; //used in read_array()
// name 은 인덱스 1 에서 부터 시작, basic array 는 index 0에서부터 시작 
int distance[MAX] = {0,}; 
int found[MAX] = {0,};
int pred[MAX][MAX];
int floyd_distance[MAX][MAX];
int floyd_cal_distance[MAX][MAX];
char buf[300] = {0,};
typedef struct{
	int src;
	int dest;
	int weight;
}Edge;
int countV(char *s){
	FILE *fd;
	fd = fopen(s, "rb");
	fgets(buf, sizeof(buf), fd);
	int i =0 ;
	int count =0;
	int n1 =0, n2 = 0; 
	while(buf[i] != '\n'){
		if(buf[i] != ' ' && buf[i] != '\t'){  //when it is not a white space 
			if((buf[i-1]== ' ' || buf[i-1] == '\t') && i-1 >=0)
			{
			 count++;
			 n1++;
			 n2 = 0;
			}
			name[n1][n2]= buf[i];
			if(n1 ==0) n1++;
			i++;
			n2++;
			name[n1][n2] ='\0';
		}
		else i++;
	}
	return count;
}
void read_array(char *s, int vertex_count){
	FILE *fd = fopen(s, "rb"); 
	char temp_buf[300]; 
	char read_buf[300];// 
	int temp=0;
	int j = 0;
	int n1 =0, n2 = 0;
	fgets(temp_buf, sizeof(temp_buf), fd);
	for(int i =0 ; i <vertex_count; i++){
		j = 0, n1 = 0;// 
		temp_buf[0] = '\0';
		fgets(temp_buf, sizeof(temp_buf), fd);
		while(temp_buf[j] !=' ' && temp_buf[j] != '\t') j++; 
		while(temp_buf[j] != '\n'){
		if(temp_buf[j] != ' ' && temp_buf[j] != '\t'){			//공백이 안나올때까지  
			if(temp_buf[j-1]== ' ' || temp_buf[j-1] == '\t') // 이전 인덱스가 공백이었다면 
			{
			 n1++; 	
			 temp_array[n1-1][n2] = '\0';
			 n2 = 0;
			}
			temp_array[n1][n2]= temp_buf[j];
			j++;
			n2++;
		}
		else j++;
			}
		for(int k=0; k <vertex_count;k++){
			if(**(temp_array+(k+1)) == 'I') basic_array[i][k] = 1000000;
			else basic_array[i][k] = atoi(*(temp_array+(k+1)));
			}
	}
}
// Dijkstra Program
int choose(HeapType *h){
	int index = 0;
	element target = delete_min_heap(h);
	for(int k = 0 ; k < vertex_count; k++){
		if(strcmp(target.vertex_name,name[k+1])==0){
			index = k; 
			break;
		}
	}
	return index; 
}
void insert_heap(HeapType *h,int vertex_count, int source){
	element a[MAX]; 
	for(int i = 0; i<vertex_count; i++){
		strcpy(a[i].vertex_name,name[i+1]); 
		a[i].key = basic_array[source][i];
	}
	for(int i =0; i <vertex_count; ++i){
		insert_min_heap(h,a[i]);
	}
}
void shortest_path(int start, int n){
	init(&heaptype,vertex_count);
	insert_heap(&heaptype, vertex_count, start);
	int i =0, u =0, w = 0; 
	for(i =0; i <n; i++){ 
		distance[i] = basic_array[start][i];
		found[i] = 0;
	}	
	found[start] =1;
	distance[start] =0; 
	while(heaptype.heap_size!=0){
		u = choose(&heaptype);
		found[u] =1;
		for(w = 0; w<n; w++){
			if(!found[w]){
				if(distance[u]+basic_array[u][w]<distance[w]){
					distance[w] = distance[u]+basic_array[u][w];
				}
			}
		}
	}
}
//dijiksta algorithm ends 

//BELLMAN-FORD ALGORITHM
void edge_initialization(Edge e[]){
	//Edge[vertex_count*vertex_count]={{none,none,none},};
	for(int i = 0; i <vertex_count; ++i){
		for(int j = 0; j <vertex_count; ++j){
			if(basic_array[i][j] !=INF){
				e[edge_count].src = i;
				e[edge_count].dest = j;
				e[edge_count++].weight = basic_array[i][j];
			}
		}
	}
}void relax(Edge e[]){
		for(int i =0; i < vertex_count-1; ++i){
		for(int j=0; j <edge_count;++j){
			if(distance[e[j].dest] > distance[e[j].src]+e[j].weight)
				distance[e[j].dest] = distance[e[j].src] + e[j].weight;
		}
	}
}
int BELLMANFORD(int edge_count,Edge e[],int s){
	for(int i=0; i <vertex_count; ++i){
		distance[i] = INF; 
	}
	distance[s] = 0;
	relax(e);
	for(int i = 0; i <edge_count; ++i){
		if(distance[e[i].dest] > distance[e[i].src]+e[i].weight)
			return 0;
	}
	return 1;
}
void print_distance(){
for(int j = 0 ; j< vertex_count;++j){
	if(distance[j] >=INF){
		printf("%s ","INF"); continue;
	}
	printf("%3d ", distance[j]);
		}
}
void FloydWarshall(){
	for(int i =0; i <vertex_count;++i){
		for(int j =0; j <vertex_count; ++j){
			floyd_distance[i][j] = basic_array[i][j];		
		}
		}
		for(int k = 0; k <vertex_count; ++k){
			for(int i =0; i <vertex_count; ++i){
				for(int j =0; j <vertex_count; ++j){
					if(floyd_distance[i][k] + floyd_distance[k][j] < floyd_distance[i][j])
						floyd_distance[i][j] = floyd_distance[i][k] + floyd_distance[k][j];
					}
				}	
			}
	}
void print_table_rows(){
	for(int i =0; i <vertex_count; ++i){
		printf(" %s ",name[i+1]);
	}
}
int main(){
	printf("input file:");
	char s[50]; 
	scanf("%s",s);
	getchar();
	time_t startTime1=0, endTime1=0;
	time_t startTime2=0, endTime2 =0;
	time_t startTime3=0, endTime3 =0;
	float gap1, gap2, gap3;
	vertex_count = countV(s);
	read_array(s,vertex_count);
	printf("=============================================\n");
	printf("Using Dijkstra Algorithm\n");
	printf("=============================================\n");
	print_table_rows();printf("\n");
	startTime1 = clock();
	for(int z = 0 ; z <vertex_count; ++z){
	shortest_path(z, vertex_count);
	endTime1=clock();
	for(int j = 0 ; j< vertex_count;++j){
	if(distance[j] >=INF){
	printf("  %s   ","INF"); continue;
	}
	printf("%5d   ", distance[j]);
		}
	printf("\n");
	}
	gap1 = (float)(endTime1-startTime1)/(CLOCKS_PER_SEC);
	printf("=============================================\n");
	printf("Dijkstra 측정 시간 : %f 초\n", gap1);
	printf("=============================================\n");
	printf("\n");printf("\n");printf("\n");
	printf("=============================================\n");
	printf("Using BELLMANFORD Algorithm\n");
	printf("=============================================\n");
	edge_count = 0; 
	print_table_rows(); printf("\n");
	Edge e[300]={{none,none,none},};
	startTime2 = clock();
	edge_initialization(e);
	for(int i = 0; i <vertex_count; ++i){
	if(!BELLMANFORD(edge_count, e, i)){
	printf("this trial start from %s can't be applied to BELLMANFORD algorithm\n", name[i+1]);
	}
	for(int j = 0 ; j< vertex_count;++j){
	if(distance[j] >=INF){
		printf("  %s   ","INF"); continue;
	}
	printf("%5d   ", distance[j]);
		}
	printf("\n");
	}
	endTime2=clock();
	gap2 = (float)(endTime2-startTime2)/(CLOCKS_PER_SEC);
	printf("=============================================\n");
	printf("BELLMANFORD 측정 시간 : %f 초\n", gap2);
	printf("=============================================\n");
	printf("\n");printf("\n");printf("\n");
	printf("=============================================\n");
	printf("Using FloydWarshall Algorithm\n");
	printf("=============================================\n");
	print_table_rows(); printf("\n");
	startTime3 = clock();
	FloydWarshall();
	for(int i = 0; i < vertex_count; ++i){
		for(int j =0; j <vertex_count; ++j){
			printf("%5d   ",floyd_distance[i][j] );
		}
		printf("\n");
	}
	endTime3=clock();
	gap3 = (float)(endTime3-startTime3)/(CLOCKS_PER_SEC);
	printf("=============================================\n");
	printf("FloydWarshall 측정 시간 : %f 초\n", gap3);
	printf("=============================================\n");
	printf("\n");printf("\n");printf("\n");
	for(int i =0; i <vertex_count; ++i){
		printf("%s\n",name[i+1]);
	}
/*
	printf("=============================================\n");
	printf("hw5..data\n");
	printf("=============================================\n");
	for(int i =0; i  <vertex_count; i++){
		for(int j = 0; j <vertex_count; ++j){
			if((basic_array[i][j]) ==INF){
			printf("%s ","INF"); continue;
			}
			else printf("%3d ", basic_array[i][j]);
		}
		printf("\n");
	}

	*/
}
